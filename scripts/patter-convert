#!/usr/bin/env python

import torch
import argparse
from patter import ModelFactory
from patter.models import SpeechModel
from patter.util.ds2 import generate_config, convert_state_dict


def get_parser():
    parser = argparse.ArgumentParser(description="Convert DeepSpeech.pytorch format models to Patter")
    parser.add_argument("legacy_model", help="Model to convert")
    parser.add_argument("model_path", help="Path to store converted model")

    return parser


def main():
    args = get_parser().parse_args()

    # load the model
    package = torch.load(args.legacy_model, map_location=lambda storage, loc: storage)
    config = generate_config(package)
    model = ModelFactory.create(config)
    model.load_state_dict(convert_state_dict(package))
    torch.save(SpeechModel.serialize(model), args.model_path)

    # print model structure and metadata
    print(model)

    print("")
    print("Model converted successfully. Saved to {}.".format(args.model_path))


if __name__ == '__main__':
    main()
